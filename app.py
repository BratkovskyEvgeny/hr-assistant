import streamlit as st

from utils import (
    analyze_skills,
    calculate_similarity,
    extract_text_from_file,
    get_detailed_analysis,
)

st.set_page_config(
    page_title="HR Assistant - –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ", page_icon="üìù", layout="wide"
)

st.title("ü§ñ HR Assistant - –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ")

# –°–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
st.header("üìã –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
job_description = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    height=200,
    help="–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç",
)

# –°–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ
st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ")
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX)", type=["pdf", "docx"]
)

if uploaded_file is not None and job_description:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—é–º–µ
    resume_text = extract_text_from_file(uploaded_file)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    similarity_score = calculate_similarity(job_description, resume_text)
    analysis_results = analyze_skills(job_description, resume_text)
    detailed_analysis = get_detailed_analysis(job_description, resume_text)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    col1, col2 = st.columns(2)

    with col1:
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", f"{similarity_score:.1f}%")

    with col2:
        if analysis_results["missing_skills"] or analysis_results["missing_experience"]:
            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
        else:
            st.success("–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
    if analysis_results["missing_skills"]:
        st.subheader("üîç –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏")
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": [
                "python",
                "java",
                "javascript",
                "typescript",
                "c++",
                "c#",
                "php",
                "ruby",
                "go",
                "rust",
                "swift",
                "kotlin",
                "scala",
                "r",
                "matlab",
            ],
            "–§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏": [
                "django",
                "flask",
                "fastapi",
                "spring",
                "laravel",
                "express",
                "asp.net",
                "rails",
                "react",
                "angular",
                "vue",
                "node.js",
                "tensorflow",
                "pytorch",
                "pandas",
                "numpy",
                "scikit-learn",
                "keras",
                "spark",
                "hadoop",
                "langchain",
                "chromadb",
                "transformers",
                "huggingface",
                "streamlit",
                "gradio",
            ],
            "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö": [
                "sql",
                "nosql",
                "mongodb",
                "postgresql",
                "mysql",
                "oracle",
                "redis",
                "elasticsearch",
                "cassandra",
                "neo4j",
                "dynamodb",
                "pinecone",
                "weaviate",
                "qdrant",
            ],
            "DevOps –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": [
                "docker",
                "kubernetes",
                "aws",
                "azure",
                "gcp",
                "linux",
                "unix",
                "git",
                "jenkins",
                "gitlab",
                "jira",
                "confluence",
                "ansible",
                "terraform",
                "prometheus",
                "grafana",
            ],
            "–î—Ä—É–≥–æ–µ": [],
        }

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_skills = {category: [] for category in categories}
        for skill in sorted(analysis_results["missing_skills"]):
            skill_lower = skill.lower()
            categorized = False
            for category, keywords in categories.items():
                if any(keyword in skill_lower for keyword in keywords):
                    categorized_skills[category].append(skill)
                    categorized = True
                    break
            if not categorized:
                categorized_skills["–î—Ä—É–≥–æ–µ"].append(skill)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, skills in categorized_skills.items():
            if skills:
                with st.expander(f"üìö {category}"):
                    for skill in sorted(skills):
                        st.write(f"- {skill}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–ø—ã—Ç
    if analysis_results["missing_experience"]:
        st.subheader("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–ø—ã—Ç")
        for exp in analysis_results["missing_experience"]:
            st.write(f"- {exp}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    st.header("üìë –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
    tabs = st.tabs(["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ù–∞–≤—ã–∫–∏", "–ü—Ä–æ–µ–∫—Ç—ã"])

    section_mapping = {
        "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": "experience",
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "education",
        "–ù–∞–≤—ã–∫–∏": "skills",
        "–ü—Ä–æ–µ–∫—Ç—ã": "projects",
    }

    for tab, section in zip(tabs, section_mapping.keys()):
        with tab:
            if section_mapping[section] in detailed_analysis:
                analysis = detailed_analysis[section_mapping[section]]
                st.metric("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", f"{analysis['relevance']:.1f}%")
                st.text_area("–¢–µ–∫—Å—Ç", analysis["text"], height=150, disabled=True)
            else:
                st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
